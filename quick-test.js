#!/usr/bin/env node

/**
 * Quick Test Script for Finance Tracker API
 * –ó–∞–ø—É—Å–∫: node quick-test.js
 */

const baseUrl = 'http://localhost:3002';

async function testHealth() {
  console.log('üîç Testing API Health...');
  try {
    const response = await fetch(`${baseUrl}/health`);
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API Health OK:', data);
      return true;
    } else {
      console.log('‚ùå API Health Failed:', data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå API not reachable:', error.message);
    console.log('üìù Make sure API is running on port 3001');
    console.log('   cd apps/api && npm run dev');
    return false;
  }
}

async function testMockAuth() {
  console.log('\nüîç Testing Mock Auth (Development only)...');
  try {
    const response = await fetch(`${baseUrl}/api/auth/mock`, {
      method: 'POST'
    });
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Mock Auth OK');
      console.log('üìã Mock initData created:', data.data?.initData?.substring(0, 50) + '...');
      return data.data?.initData;
    } else {
      console.log('‚ùå Mock Auth Failed:', data.error || data.message);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Mock Auth Error:', error.message);
    return null;
  }
}

async function testTelegramAuth(initData) {
  console.log('\nüîç Testing Telegram Auth...');
  try {
    const response = await fetch(`${baseUrl}/api/auth/telegram`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ initData })
    });
    const data = await response.json();
    
    if (response.ok && data.success) {
      console.log('‚úÖ Telegram Auth OK');
      console.log('üë§ User:', data.data.user.first_name);
      console.log('üîë Token received (length):', data.data.token.length);
      return data.data.token;
    } else {
      console.log('‚ùå Telegram Auth Failed:', data.error || data.message);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Telegram Auth Error:', error.message);
    return null;
  }
}

async function testAuthMe(token) {
  console.log('\nüîç Testing Auth Me...');
  try {
    const response = await fetch(`${baseUrl}/api/auth/me`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    const data = await response.json();
    
    if (response.ok && data.success) {
      console.log('‚úÖ Auth Me OK');
      console.log('üë§ User ID:', data.data.user.id);
      console.log('üí∞ Total Balance:', data.data.total_balance);
      return true;
    } else {
      console.log('‚ùå Auth Me Failed:', data.error || data.message);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Auth Me Error:', error.message);
    return false;
  }
}

async function testCategories(token) {
  console.log('\nüîç Testing Categories...');
  try {
    const response = await fetch(`${baseUrl}/api/categories`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Categories OK');
      console.log('üìã Categories found:', data.data?.length || 0);
      
      if (data.data?.length > 0) {
        console.log('üìù Sample categories:', data.data.slice(0, 3).map(cat => 
          `${cat.icon} ${cat.name} (${cat.type})`
        ));
      }
      return true;
    } else {
      console.log('‚ùå Categories Failed:', data.error || data.message);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Categories Error:', error.message);
    return false;
  }
}

async function testAccounts(token) {
  console.log('\nüîç Testing Accounts...');
  try {
    const response = await fetch(`${baseUrl}/api/accounts`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Accounts OK');
      console.log('üí≥ Accounts found:', data.data?.length || 0);
      
      if (data.data?.length > 0) {
        console.log('üìù Sample accounts:', data.data.map(acc => 
          `${acc.icon} ${acc.name}: ${acc.balance} ${acc.currency}`
        ));
      }
      return true;
    } else {
      console.log('‚ùå Accounts Failed:', data.error || data.message);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Accounts Error:', error.message);
    return false;
  }
}

async function runTests() {
  console.log('üöÄ Finance Tracker API Quick Test\n');
  
  // Test 1: Health Check
  const healthOk = await testHealth();
  if (!healthOk) {
    console.log('\n‚ùå API –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤.');
    process.exit(1);
  }
  
  // Test 2: Mock Auth (for development)
  const initData = await testMockAuth();
  if (!initData) {
    console.log('\n‚ö†Ô∏è Mock Auth –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.');
    console.log('üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.log('   - Supabase –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
    console.log('   - –°—Ö–µ–º–∞ –ë–î –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏–∑ supabase-schema.sql');
    console.log('   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ apps/api/.env');
    process.exit(1);
  }
  
  // Test 3: Telegram Auth
  const token = await testTelegramAuth(initData);
  if (!token) {
    console.log('\n‚ùå Telegram Auth –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    process.exit(1);
  }
  
  // Test 4: Auth Me
  const authMeOk = await testAuthMe(token);
  if (!authMeOk) {
    console.log('\n‚ùå Auth Me –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
    process.exit(1);
  }
  
  // Test 5: Categories
  await testCategories(token);
  
  // Test 6: Accounts
  await testAccounts(token);
  
  console.log('\nüéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
  console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
  console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç');
  console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ http://localhost:3003');
  console.log('   3. –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ UI');
  console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram (—á–µ—Ä–µ–∑ ngrok)');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);