#!/usr/bin/env node

/**
 * Supabase Connection Debug Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './.env' });

async function debugSupabase() {
  console.log('üîç Supabase Connection Debug\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã Environment Variables:');
  console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing');
  console.log('SUPABASE_ANON_KEY:', process.env.SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Set' : '‚ùå Missing');
  
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('\n‚ùå Missing required environment variables');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
  const supabaseAnon = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
  );

  const supabaseAdmin = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  console.log('\nüîó Testing connections...\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ health check
  try {
    console.log('1. Testing basic connection...');
    const { data, error } = await supabaseAnon.from('categories').select('count').limit(1);
    if (error) {
      console.log('‚ùå Connection failed:', error.message);
      console.log('   Details:', error);
    } else {
      console.log('‚úÖ Basic connection OK');
    }
  } catch (err) {
    console.log('‚ùå Connection error:', err.message);
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  console.log('\n2. Checking tables...');
  
  const tables = ['users', 'accounts', 'categories', 'transactions'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabaseAdmin.from(table).select('count').limit(1);
      if (error) {
        console.log(`‚ùå Table "${table}":`, error.message);
      } else {
        console.log(`‚úÖ Table "${table}": OK`);
      }
    } catch (err) {
      console.log(`‚ùå Table "${table}" error:`, err.message);
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log('\n3. Checking default categories...');
  try {
    const { data, error } = await supabaseAdmin
      .from('categories')
      .select('*')
      .eq('is_default', true)
      .limit(5);
    
    if (error) {
      console.log('‚ùå Default categories error:', error.message);
      console.log('   Details:', error);
    } else {
      console.log(`‚úÖ Found ${data?.length || 0} default categories`);
      if (data && data.length > 0) {
        console.log('   Sample categories:', data.slice(0, 3).map(cat => 
          `${cat.icon} ${cat.name} (${cat.type})`
        ));
      }
    }
  } catch (err) {
    console.log('‚ùå Categories error:', err.message);
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n4. Testing user creation flow...');
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth
    const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email: `test-${Date.now()}@telegram.local`,
      user_metadata: {
        telegram_id: 12345,
        first_name: 'Test User'
      },
      email_confirm: true
    });

    if (authError) {
      console.log('‚ùå Auth user creation failed:', authError.message);
      console.log('   Details:', authError);
    } else {
      console.log('‚úÖ Auth user created:', authUser.user?.id);
      
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ users —Ç–∞–±–ª–∏—Ü–µ
      const { data: userData, error: userError } = await supabaseAdmin
        .from('users')
        .insert([{
          id: authUser.user?.id,
          telegram_id: 12345,
          first_name: 'Test User'
        }])
        .select();

      if (userError) {
        console.log('‚ùå User table insert failed:', userError.message);
        console.log('   Details:', userError);
      } else {
        console.log('‚úÖ User table insert OK');
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await supabaseAdmin.from('users').delete().eq('id', authUser.user?.id);
        await supabaseAdmin.auth.admin.deleteUser(authUser.user?.id);
        console.log('‚úÖ Test data cleaned up');
      }
    }
  } catch (err) {
    console.log('‚ùå User creation test error:', err.message);
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
  console.log('\n5. Testing RLS policies...');
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
    const { data, error } = await supabaseAnon.from('users').select('*').limit(1);
    
    if (error) {
      if (error.message.includes('RLS') || error.message.includes('policy')) {
        console.log('‚úÖ RLS policies are working (blocking unauthorized access)');
      } else {
        console.log('‚ùå Unexpected error:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è RLS might not be working properly (got data without auth)');
    }
  } catch (err) {
    console.log('‚ùå RLS test error:', err.message);
  }

  console.log('\nüéØ Debug Summary:');
  console.log('If all basic tests pass but auth still fails, the issue might be:');
  console.log('1. RLS policies blocking service role access');
  console.log('2. Telegram initData validation failing');
  console.log('3. JWT secret or environment variable mismatch');
  console.log('\nüìù Next steps: Check the specific error in API logs');
}

debugSupabase().catch(console.error);